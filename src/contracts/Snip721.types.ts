/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type ExecuteAnswer = {
  mint_nft: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  batch_mint_nft: {
    token_ids: string[];
    [k: string]: unknown;
  };
} | {
  mint_nft_clones: {
    first_minted: string;
    last_minted: string;
    [k: string]: unknown;
  };
} | {
  set_metadata: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  set_royalty_info: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  make_ownership_private: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  reveal: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  approve: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  revoke: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  approve_all: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  revoke_all: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  set_global_approval: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  set_whitelisted_approval: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  transfer_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  batch_transfer_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  send_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  batch_send_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  burn_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  batch_burn_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  register_receive_nft: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  viewing_key: {
    key: string;
    [k: string]: unknown;
  };
} | {
  add_minters: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  remove_minters: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  set_minters: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  change_admin: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  set_contract_status: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
} | {
  revoke_permit: {
    status: ResponseStatus;
    [k: string]: unknown;
  };
};
export type ResponseStatus = "success" | "failure";
export type ExecuteMsg = {
  mint_nft: {
    memo?: string | null;
    owner?: string | null;
    padding?: string | null;
    private_metadata?: Metadata | null;
    public_metadata?: Metadata | null;
    royalty_info?: RoyaltyInfo | null;
    serial_number?: SerialNumber | null;
    token_id?: string | null;
    transferable?: boolean | null;
    [k: string]: unknown;
  };
} | {
  batch_mint_nft: {
    mints: Mint[];
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  mint_nft_clones: {
    memo?: string | null;
    mint_run_id?: string | null;
    owner?: string | null;
    padding?: string | null;
    private_metadata?: Metadata | null;
    public_metadata?: Metadata | null;
    quantity: number;
    royalty_info?: RoyaltyInfo | null;
    [k: string]: unknown;
  };
} | {
  set_metadata: {
    padding?: string | null;
    private_metadata?: Metadata | null;
    public_metadata?: Metadata | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  set_royalty_info: {
    padding?: string | null;
    royalty_info?: RoyaltyInfo | null;
    token_id?: string | null;
    [k: string]: unknown;
  };
} | {
  reveal: {
    padding?: string | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  make_ownership_private: {
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  set_global_approval: {
    expires?: Expiration | null;
    padding?: string | null;
    token_id?: string | null;
    view_owner?: AccessLevel | null;
    view_private_metadata?: AccessLevel | null;
    [k: string]: unknown;
  };
} | {
  set_whitelisted_approval: {
    address: string;
    expires?: Expiration | null;
    padding?: string | null;
    token_id?: string | null;
    transfer?: AccessLevel | null;
    view_owner?: AccessLevel | null;
    view_private_metadata?: AccessLevel | null;
    [k: string]: unknown;
  };
} | {
  approve: {
    expires?: Expiration | null;
    padding?: string | null;
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  revoke: {
    padding?: string | null;
    spender: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approve_all: {
    expires?: Expiration | null;
    operator: string;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  revoke_all: {
    operator: string;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  transfer_nft: {
    memo?: string | null;
    padding?: string | null;
    recipient: string;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  batch_transfer_nft: {
    padding?: string | null;
    transfers: Transfer[];
    [k: string]: unknown;
  };
} | {
  send_nft: {
    contract: string;
    memo?: string | null;
    msg?: Binary | null;
    padding?: string | null;
    receiver_info?: ReceiverInfo | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  batch_send_nft: {
    padding?: string | null;
    sends: Send[];
    [k: string]: unknown;
  };
} | {
  burn_nft: {
    memo?: string | null;
    padding?: string | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  batch_burn_nft: {
    burns: Burn[];
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  register_receive_nft: {
    also_implements_batch_receive_nft?: boolean | null;
    code_hash: string;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  create_viewing_key: {
    entropy: string;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  set_viewing_key: {
    key: string;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  add_minters: {
    minters: string[];
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  remove_minters: {
    minters: string[];
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  set_minters: {
    minters: string[];
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  change_admin: {
    address: string;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  set_contract_status: {
    level: ContractStatus;
    padding?: string | null;
    [k: string]: unknown;
  };
} | {
  revoke_permit: {
    padding?: string | null;
    permit_name: string;
    [k: string]: unknown;
  };
};
export type Expiration = {
  at_height: number;
} | {
  at_time: number;
} | "never";
export type AccessLevel = "approve_token" | "all" | "revoke_token" | "none";
export type Binary = string;
export type ContractStatus = "normal" | "stop_transactions" | "stop_all";
export interface Metadata {
  extension?: Extension | null;
  token_uri?: string | null;
  [k: string]: unknown;
}
export interface Extension {
  animation_url?: string | null;
  attributes?: Trait[] | null;
  background_color?: string | null;
  description?: string | null;
  external_url?: string | null;
  image?: string | null;
  image_data?: string | null;
  media?: MediaFile[] | null;
  name?: string | null;
  protected_attributes?: string[] | null;
  token_subtype?: string | null;
  youtube_url?: string | null;
  [k: string]: unknown;
}
export interface Trait {
  display_type?: string | null;
  max_value?: string | null;
  trait_type?: string | null;
  value: string;
  [k: string]: unknown;
}
export interface MediaFile {
  authentication?: Authentication | null;
  extension?: string | null;
  file_type?: string | null;
  url: string;
  [k: string]: unknown;
}
export interface Authentication {
  key?: string | null;
  user?: string | null;
  [k: string]: unknown;
}
export interface RoyaltyInfo {
  decimal_places_in_rates: number;
  royalties: Royalty[];
  [k: string]: unknown;
}
export interface Royalty {
  rate: number;
  recipient: string;
  [k: string]: unknown;
}
export interface SerialNumber {
  mint_run?: number | null;
  quantity_minted_this_run?: number | null;
  serial_number: number;
  [k: string]: unknown;
}
export interface Mint {
  memo?: string | null;
  owner?: string | null;
  private_metadata?: Metadata | null;
  public_metadata?: Metadata | null;
  royalty_info?: RoyaltyInfo | null;
  serial_number?: SerialNumber | null;
  token_id?: string | null;
  transferable?: boolean | null;
  [k: string]: unknown;
}
export interface Transfer {
  memo?: string | null;
  recipient: string;
  token_ids: string[];
  [k: string]: unknown;
}
export interface ReceiverInfo {
  also_implements_batch_receive_nft?: boolean | null;
  recipient_code_hash: string;
  [k: string]: unknown;
}
export interface Send {
  contract: string;
  memo?: string | null;
  msg?: Binary | null;
  receiver_info?: ReceiverInfo | null;
  token_ids: string[];
  [k: string]: unknown;
}
export interface Burn {
  memo?: string | null;
  token_ids: string[];
  [k: string]: unknown;
}
export type Uint128 = string;
export interface InstantiateMsg {
  admin?: string | null;
  config?: InstantiateConfig | null;
  entropy: string;
  name: string;
  post_init_callback?: PostInstantiateCallback | null;
  royalty_info?: RoyaltyInfo | null;
  symbol: string;
  [k: string]: unknown;
}
export interface InstantiateConfig {
  enable_burn?: boolean | null;
  enable_sealed_metadata?: boolean | null;
  minter_may_update_metadata?: boolean | null;
  owner_may_update_metadata?: boolean | null;
  public_owner?: boolean | null;
  public_token_supply?: boolean | null;
  unwrapped_metadata_is_private?: boolean | null;
  [k: string]: unknown;
}
export interface PostInstantiateCallback {
  code_hash: string;
  contract_address: string;
  msg: Binary;
  send: Coin[];
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export type QueryAnswer = {
  contract_info: {
    name: string;
    symbol: string;
    [k: string]: unknown;
  };
} | {
  contract_config: {
    burn_is_enabled: boolean;
    implements_non_transferable_tokens: boolean;
    implements_token_subtype: boolean;
    minter_may_update_metadata: boolean;
    owner_is_public: boolean;
    owner_may_update_metadata: boolean;
    sealed_metadata_is_enabled: boolean;
    token_supply_is_public: boolean;
    unwrapped_metadata_is_private: boolean;
    [k: string]: unknown;
  };
} | {
  minters: {
    minters: Addr[];
    [k: string]: unknown;
  };
} | {
  num_tokens: {
    count: number;
    [k: string]: unknown;
  };
} | {
  token_list: {
    tokens: string[];
    [k: string]: unknown;
  };
} | {
  owner_of: {
    approvals: Cw721Approval[];
    owner: Addr;
    [k: string]: unknown;
  };
} | {
  token_approvals: {
    owner_is_public: boolean;
    private_metadata_is_public: boolean;
    private_metadata_is_public_expiration?: Expiration | null;
    public_ownership_expiration?: Expiration | null;
    token_approvals: Snip721Approval[];
    [k: string]: unknown;
  };
} | {
  inventory_approvals: {
    inventory_approvals: Snip721Approval[];
    owner_is_public: boolean;
    private_metadata_is_public: boolean;
    private_metadata_is_public_expiration?: Expiration | null;
    public_ownership_expiration?: Expiration | null;
    [k: string]: unknown;
  };
} | {
  nft_info: {
    extension?: Extension | null;
    token_uri?: string | null;
    [k: string]: unknown;
  };
} | {
  private_metadata: {
    extension?: Extension | null;
    token_uri?: string | null;
    [k: string]: unknown;
  };
} | {
  all_nft_info: {
    access: Cw721OwnerOfResponse;
    info?: Metadata | null;
    [k: string]: unknown;
  };
} | {
  nft_dossier: {
    display_private_metadata_error?: string | null;
    inventory_approvals?: Snip721Approval[] | null;
    mint_run_info?: MintRunInfo | null;
    owner?: Addr | null;
    owner_is_public: boolean;
    private_metadata?: Metadata | null;
    private_metadata_is_public: boolean;
    private_metadata_is_public_expiration?: Expiration | null;
    public_metadata?: Metadata | null;
    public_ownership_expiration?: Expiration | null;
    royalty_info?: DisplayRoyaltyInfo | null;
    token_approvals?: Snip721Approval[] | null;
    transferable: boolean;
    unwrapped: boolean;
    [k: string]: unknown;
  };
} | {
  batch_nft_dossier: {
    nft_dossiers: BatchNftDossierElement[];
    [k: string]: unknown;
  };
} | {
  approved_for_all: {
    operators: Cw721Approval[];
    [k: string]: unknown;
  };
} | {
  is_unwrapped: {
    token_is_unwrapped: boolean;
    [k: string]: unknown;
  };
} | {
  is_transferable: {
    token_is_transferable: boolean;
    [k: string]: unknown;
  };
} | {
  implements_non_transferable_tokens: {
    is_enabled: boolean;
    [k: string]: unknown;
  };
} | {
  implements_token_subtype: {
    is_enabled: boolean;
    [k: string]: unknown;
  };
} | {
  verify_transfer_approval: {
    approved_for_all: boolean;
    first_unapproved_token?: string | null;
    [k: string]: unknown;
  };
} | {
  transaction_history: {
    total: number;
    txs: Tx[];
    [k: string]: unknown;
  };
} | {
  registered_code_hash: {
    also_implements_batch_receive_nft: boolean;
    code_hash?: string | null;
    [k: string]: unknown;
  };
} | {
  royalty_info: {
    royalty_info?: DisplayRoyaltyInfo | null;
    [k: string]: unknown;
  };
} | {
  contract_creator: {
    creator?: Addr | null;
    [k: string]: unknown;
  };
};
export type Addr = string;
export type TxAction = {
  transfer: {
    from: Addr;
    recipient: Addr;
    sender?: Addr | null;
    [k: string]: unknown;
  };
} | {
  mint: {
    minter: Addr;
    recipient: Addr;
    [k: string]: unknown;
  };
} | {
  burn: {
    burner?: Addr | null;
    owner: Addr;
    [k: string]: unknown;
  };
};
export interface Cw721Approval {
  expires: Expiration;
  spender: Addr;
  [k: string]: unknown;
}
export interface Snip721Approval {
  address: Addr;
  transfer_expiration?: Expiration | null;
  view_owner_expiration?: Expiration | null;
  view_private_metadata_expiration?: Expiration | null;
  [k: string]: unknown;
}
export interface Cw721OwnerOfResponse {
  approvals: Cw721Approval[];
  owner?: Addr | null;
  [k: string]: unknown;
}
export interface MintRunInfo {
  collection_creator?: Addr | null;
  mint_run?: number | null;
  quantity_minted_this_run?: number | null;
  serial_number?: number | null;
  time_of_minting?: number | null;
  token_creator?: Addr | null;
  [k: string]: unknown;
}
export interface DisplayRoyaltyInfo {
  decimal_places_in_rates: number;
  royalties: DisplayRoyalty[];
  [k: string]: unknown;
}
export interface DisplayRoyalty {
  rate: number;
  recipient?: Addr | null;
  [k: string]: unknown;
}
export interface BatchNftDossierElement {
  display_private_metadata_error?: string | null;
  inventory_approvals?: Snip721Approval[] | null;
  mint_run_info?: MintRunInfo | null;
  owner?: Addr | null;
  owner_is_public: boolean;
  private_metadata?: Metadata | null;
  private_metadata_is_public: boolean;
  private_metadata_is_public_expiration?: Expiration | null;
  public_metadata?: Metadata | null;
  public_ownership_expiration?: Expiration | null;
  royalty_info?: DisplayRoyaltyInfo | null;
  token_approvals?: Snip721Approval[] | null;
  token_id: string;
  transferable: boolean;
  unwrapped: boolean;
  [k: string]: unknown;
}
export interface Tx {
  action: TxAction;
  block_height: number;
  block_time: number;
  memo?: string | null;
  token_id: string;
  tx_id: number;
  [k: string]: unknown;
}
export type QueryMsg = {
  contract_info: {
    [k: string]: unknown;
  };
} | {
  contract_config: {
    [k: string]: unknown;
  };
} | {
  minters: {
    [k: string]: unknown;
  };
} | {
  num_tokens: {
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  all_tokens: {
    limit?: number | null;
    start_after?: string | null;
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  owner_of: {
    include_expired?: boolean | null;
    token_id: string;
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  nft_info: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  all_nft_info: {
    include_expired?: boolean | null;
    token_id: string;
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  private_metadata: {
    token_id: string;
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  nft_dossier: {
    include_expired?: boolean | null;
    token_id: string;
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  batch_nft_dossier: {
    include_expired?: boolean | null;
    token_ids: string[];
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  token_approvals: {
    include_expired?: boolean | null;
    token_id: string;
    viewing_key: string;
    [k: string]: unknown;
  };
} | {
  inventory_approvals: {
    address: string;
    include_expired?: boolean | null;
    viewing_key: string;
    [k: string]: unknown;
  };
} | {
  approved_for_all: {
    include_expired?: boolean | null;
    owner: string;
    viewing_key?: string | null;
    [k: string]: unknown;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
    viewer?: string | null;
    viewing_key?: string | null;
    [k: string]: unknown;
  };
} | {
  num_tokens_of_owner: {
    owner: string;
    viewer?: string | null;
    viewing_key?: string | null;
    [k: string]: unknown;
  };
} | {
  is_unwrapped: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  is_transferable: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  implements_non_transferable_tokens: {
    [k: string]: unknown;
  };
} | {
  implements_token_subtype: {
    [k: string]: unknown;
  };
} | {
  verify_transfer_approval: {
    address: string;
    token_ids: string[];
    viewing_key: string;
    [k: string]: unknown;
  };
} | {
  transaction_history: {
    address: string;
    page?: number | null;
    page_size?: number | null;
    viewing_key: string;
    [k: string]: unknown;
  };
} | {
  registered_code_hash: {
    contract: string;
    [k: string]: unknown;
  };
} | {
  royalty_info: {
    token_id?: string | null;
    viewer?: ViewerInfo | null;
    [k: string]: unknown;
  };
} | {
  contract_creator: {
    [k: string]: unknown;
  };
} | {
  with_permit: {
    permit: PermitForTokenPermissions;
    query: QueryWithPermit;
    [k: string]: unknown;
  };
};
export type TokenPermissions = "allowance" | "balance" | "history" | "owner";
export type QueryWithPermit = {
  royalty_info: {
    token_id?: string | null;
    [k: string]: unknown;
  };
} | {
  private_metadata: {
    token_id: string;
    [k: string]: unknown;
  };
} | {
  nft_dossier: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  batch_nft_dossier: {
    include_expired?: boolean | null;
    token_ids: string[];
    [k: string]: unknown;
  };
} | {
  owner_of: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  all_nft_info: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  inventory_approvals: {
    include_expired?: boolean | null;
    [k: string]: unknown;
  };
} | {
  verify_transfer_approval: {
    token_ids: string[];
    [k: string]: unknown;
  };
} | {
  transaction_history: {
    page?: number | null;
    page_size?: number | null;
    [k: string]: unknown;
  };
} | {
  num_tokens: {
    [k: string]: unknown;
  };
} | {
  all_tokens: {
    limit?: number | null;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  token_approvals: {
    include_expired?: boolean | null;
    token_id: string;
    [k: string]: unknown;
  };
} | {
  approved_for_all: {
    include_expired?: boolean | null;
    [k: string]: unknown;
  };
} | {
  tokens: {
    limit?: number | null;
    owner: string;
    start_after?: string | null;
    [k: string]: unknown;
  };
} | {
  num_tokens_of_owner: {
    owner: string;
    [k: string]: unknown;
  };
};
export interface ViewerInfo {
  address: string;
  viewing_key: string;
  [k: string]: unknown;
}
export interface PermitForTokenPermissions {
  params: PermitParamsForTokenPermissions;
  signature: PermitSignature;
  [k: string]: unknown;
}
export interface PermitParamsForTokenPermissions {
  allowed_tokens: string[];
  chain_id: string;
  permissions: TokenPermissions[];
  permit_name: string;
  [k: string]: unknown;
}
export interface PermitSignature {
  pub_key: PubKey;
  signature: Binary;
  [k: string]: unknown;
}
export interface PubKey {
  type: string;
  value: Binary;
  [k: string]: unknown;
}