/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type TxEncoding = "proto3" | "proto3json";
export interface InstantiateMsg {
  cw721_ica_extension_code_id: number;
  default_chan_init_options: ChannelOpenInitOptions;
  ica_controller_code_id: number;
  owner?: string | null;
  salt?: string | null;
}
export interface ChannelOpenInitOptions {
  connection_id: string;
  counterparty_connection_id: string;
  counterparty_port_id?: string | null;
  tx_encoding?: TxEncoding | null;
}
export type ExecuteMsg = {
  mint_ica: {
    salt?: string | null;
  };
} | {
  receive_ica_callback: IcaControllerCallbackMsg;
} | {
  execute_ica_msg: {
    msg: ExecuteMsg1;
    token_id: string;
  };
} | {
  update_ownership: Action;
};
export type IcaControllerCallbackMsg = {
  on_acknowledgement_packet_callback: {
    ica_acknowledgement: AcknowledgementData;
    original_packet: IbcPacket;
    relayer: Addr;
  };
} | {
  on_timeout_packet_callback: {
    original_packet: IbcPacket;
    relayer: Addr;
  };
} | {
  on_channel_open_ack_callback: {
    channel: IbcChannel;
    ica_address: string;
    tx_encoding: TxEncoding;
  };
};
export type AcknowledgementData = {
  result: Binary;
} | {
  error: string;
};
export type Binary = string;
export type Timestamp = Uint64;
export type Uint64 = string;
export type Addr = string;
export type IbcOrder = "ORDER_UNORDERED" | "ORDER_ORDERED";
export type ExecuteMsg1 = {
  create_channel: ChannelOpenInitOptions;
} | {
  send_custom_ica_messages: {
    messages: Binary;
    packet_memo?: string | null;
    timeout_seconds?: number | null;
  };
} | {
  update_admin: {
    admin: string;
  };
} | {
  update_callback_address: {
    callback_address?: string | null;
  };
};
export type Action = {
  transfer_ownership: {
    expiry?: Expiration | null;
    new_owner: string;
  };
} | "accept_ownership" | "renounce_ownership";
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export interface IbcPacket {
  data: Binary;
  dest: IbcEndpoint;
  sequence: number;
  src: IbcEndpoint;
  timeout: IbcTimeout;
  [k: string]: unknown;
}
export interface IbcEndpoint {
  channel_id: string;
  port_id: string;
  [k: string]: unknown;
}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null;
  timestamp?: Timestamp | null;
  [k: string]: unknown;
}
export interface IbcTimeoutBlock {
  height: number;
  revision: number;
  [k: string]: unknown;
}
export interface IbcChannel {
  connection_id: string;
  counterparty_endpoint: IbcEndpoint;
  endpoint: IbcEndpoint;
  order: IbcOrder;
  version: string;
  [k: string]: unknown;
}
export type QueryMsg = {
  get_contract_state: {};
} | {
  nft_ica_controller_bimap: {
    key: string;
  };
} | {
  get_ica_address: {
    token_id: string;
  };
} | {
  ownership: {};
};
export interface ContractState {
  cw721_ica_extension_address: Addr;
  default_chan_init_options: ChannelOpenInitOptions;
  ica_controller_code_id: number;
}
export type String = string;
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}